version: v1.0
name: windows-build-test-release
agent:
  machine:
    type: s1-prod-windows

auto_cancel:
  running:
    when: "branch != 'main'"

execution_time_limit:
  hours: 1

queue:
  - when: "branch != 'main'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout
      - git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
      - git fetch --all --tags
      - |
        git checkout "$(sem-context get release_version)"
      - $Env:PATH += ";C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64"
      - $Env:PATH += ";C:\Program Files\Git\bin"
      # Restore caches for GraalVM and Chocolatey
      - cache restore graal_download_zip
      - cache restore choco_temp_dir
      # Login to Vault
      - $Env:VAULT_ADDR = "https://vault.cireops.gcp.internal.confluent.cloud"
      - vault login -no-print token=$(vault write -field=token "auth/semaphore_self_hosted/login" role="default" jwt="$Env:SEMAPHORE_OIDC_TOKEN")
      # Fetch Azure certificate from Vault and create the PFX file
      - vault kv get -field=azure_certificate v1/ci/kv/cli/release > certificate_base64.txt
      - certutil -decode certificate_base64.txt certificate.pfx
      # Install GraalVM
      - |
        if (-not (Test-Path graalvm-community-jdk-21.0.2_windows-x64_bin.zip)) {
          Invoke-WebRequest -OutFile graalvm-community-jdk-21.0.2_windows-x64_bin.zip -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_windows-x64_bin.zip
        }
      - expand-archive -path .\graalvm-community-jdk-21.0.2_windows-x64_bin.zip -destinationpath C:\semaphore-agent\graalvm
      - $Env:JAVA_HOME = "C:\semaphore-agent\graalvm\graalvm-community-openjdk-21.0.2+13.1"
      - $Env:PATH += ";C:\semaphore-agent\graalvm\graalvm-community-openjdk-21.0.2+13.1\bin"
      # Install VS 2022 build tools and VC++ tools, required by GraalVM native-image build
      - choco install visualstudio2022buildtools -y --package-parameters "--locale en-US --path install=C:\VS 2022 BT --path shared=C:\VS 2022 Shared --path cache=C:\VS 2022 Cache"
      - choco install visualstudio2022-workload-vctools -y
      # Install GitHub CLI for uploading the native executable to the GitHub release
      - choco install gh -y
      - $Env:PATH += ";C:\Program Files\GitHub CLI\"
      # Usage of GH cli in automation (when "CI" is set) requires us to set the GH_TOKEN environment variable.
      - $Env:GH_TOKEN = $Env:GITHUB_TOKEN
      - gh --version
      # This ensures native-image.cmd is able to find the local installation
      # of VC++ tools and VS Build Tools.
      - |
        $filePath = "$Env:JAVA_HOME\bin\native-image.cmd"
        $prependText = "call `"C:\VS 2022 BT\VC\Auxiliary\Build\vcvars64.bat`"`r`n"
        $fileContent = Get-Content -Raw -Path $filePath
        $newContent = $prependText + $fileContent
        Set-Content -Path $filePath -Value $newContent
        Write-Host "Prepended the native-image.cmd file with the Visual Studio 2022 Community Edition vcvars64.bat path."
  epilogue:
    always:
      commands:
        - cache store graal_download_zip graalvm-community-jdk-21.0.2_windows-x64_bin.zip
        - cache store choco_temp_dir "$Env:USERPROFILE\AppData\Local\Temp\chocolatey"

blocks:
  - name: "Build and Test Native Executable (Windows x64)"
    run:
      when: "branch =~ '.*'"
    task:
      prologue:
        commands:
          - cache restore windows_maven_cache
      epilogue:
        always:
          commands:
            - cache store windows_maven_cache "$Env:USERPROFILE\.m2\repository"
      env_vars:
        - name: MAVEN_PROFILES
          value: "!unix,windows"
        - name: OS
          value: "windows"
        - name: ARCH
          value: "x64"
      jobs:
        - name: "Build and Test Native Executable (Windows x64)"
          commands:
            # Builds native executable for Windows x64
            # TODO: Temporarily disable running tests while we investigate why they fail randomly
            - make mvn-package-native-no-tests
            # Push unsigned executable to GH release and Semaphore
            - |
              $executable = Get-ChildItem -Recurse ".\target\" -Filter "*-runner.exe" | Select-Object -ExpandProperty FullName
              $executable_with_os_arch = $executable -replace "-runner", "-runner-$($Env:OS)-$($Env:ARCH)"
              Rename-Item -Path $executable -NewName (Split-Path -Leaf $executable_with_os_arch)
              Write-Host "Signing executable $executable_with_os_arch";
              signtool sign /debug /v /f certificate.pfx "$executable_with_os_arch";
              try {artifact push workflow $executable_with_os_arch --destination "native-executables/$(Split-Path -Leaf $executable_with_os_arch)"} catch {Write-Host "Artifact push failed"}
              $Env:GH_TOKEN = $Env:GITHUB_TOKEN
              gh release upload "$(sem-context get release_version)" $executable_with_os_arch --clobber
