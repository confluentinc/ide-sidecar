<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.confluent</groupId>
    <artifactId>common-parent</artifactId>
    <version>7.7.0</version>
  </parent>

  <groupId>io.confluent</groupId>
  <artifactId>ide-sidecar</artifactId>
  <version>0.32.0</version>
  <packaging>jar</packaging>
  <name>IDE Sidecar</name>
  <description>Sidecar used by Confluent for VS Code.</description>

  <scm>
    <connection>scm:git:git://github.com/confluentinc/ide-sidecar.git</connection>
    <developerConnection>scm:git:git@github.com:confluentinc/ide-sidecar.git</developerConnection>
    <url>https://github.com/confluentinc/ide-sidecar</url>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <!-- Always build file system layout for Docker images -->
    <docker.skip-build>false</docker.skip-build>
    <!-- Never deploy to maven repository since make only builds CCloud Docker images -->
    <maven.deploy.skip>true</maven.deploy.skip>
    <compiler-plugin.version>3.12.1</compiler-plugin.version>
    <surefire-plugin.version>3.2.5</surefire-plugin.version>
    <jacoco-maven-plugin.version>0.8.11</jacoco-maven-plugin.version>
    <maven.compiler.release>21</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
    <!-- Plugin versions required by this aggregate pom -->
    <jxr-maven-plugin.version>3.1.1</jxr-maven-plugin.version>
    <dependency.check.version>6.1.6</dependency.check.version>
    <java.version>21</java.version>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <maven.compiler.parameters>true</maven.compiler.parameters>
    <license.first.year>${project.inceptionYear}</license.first.year>
    <license.current.year>2024</license.current.year>
    <project.inceptionYear>2024</project.inceptionYear>
    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
    <vertx.version>4.5.7</vertx.version>
    <wiremock.version>1.3.2</wiremock.version>
    <netty.version>4.1.109.Final</netty.version>
    <commons-codec.version>1.17.0</commons-codec.version>
    <picocli.version>4.7.6</picocli.version>
    <maven.shared.utils.version>3.4.2</maven.shared.utils.version>
    <qute.version>3.0.1</qute.version>
    <!--
    The Quarkus GraphQL libraries require 3.25.2 of protobuf-java via this chain:
          -> io.quarkus:quarkus-smallrye-graphql:3.10.1
            -> io.smallrye:smallrye-graphql-cdi:2.8.4
              -> io.smallrye:smallrye-graphql:2.8.4
                -> com.apollographql.federation:federation-graphql-java-support:4.4.0
                  -> com.google.protobuf:protobuf-java:jar:3.25.2:compile
    However, the Confluent parent POM defines 3.25.1. Rather than use that
    slightly-older patch, we can override the version here to the latest patch.
    See DTX-222 and DTX-312 for details.
    -->
    <protobuf.version>3.25.3</protobuf.version>
    <build-tools.dir>${project.basedir}/build-tools</build-tools.dir>
    <spotbugs.maven.plugin.version>4.8.5.0</spotbugs.maven.plugin.version>
    <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
    <quarkus.platform.version>3.13.3</quarkus.platform.version>
    <io.confluent.common.version>7.7.0</io.confluent.common.version>
    <jackson-dataformat.version>2.17.1</jackson-dataformat.version>
    <versions-maven-plugin.version>2.8.1</versions-maven-plugin.version>
  </properties>

  <repositories>
    <repository>
      <id>confluent</id>
      <name>Confluent</name>
      <url>https://packages.confluent.io/maven/</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>${quarkus.platform.artifact-id}</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-universe-bom</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-arc</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-graphql</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>org.eclipse.microprofile.openapi</groupId>
      <artifactId>microprofile-openapi-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-reactive-routes</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-scheduler</artifactId>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <version>${netty.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>${commons-codec.version}</version>
    </dependency>
    <!-- Command line parsing -->
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${picocli.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <version>${maven.shared.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkiverse.qute.web</groupId>
      <artifactId>quarkus-qute-web</artifactId>
      <version>${qute.version}</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-schema-registry-client</artifactId>
      <version>${io.confluent.common.version}</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-avro-serializer</artifactId>
      <version>${io.confluent.common.version}</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-json-schema-serializer</artifactId>
      <version>${io.confluent.common.version}</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-protobuf-serializer</artifactId>
      <version>${io.confluent.common.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-avro</artifactId>
      <version>${jackson-dataformat.version}</version>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jacoco</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkiverse.wiremock</groupId>
      <artifactId>quarkus-wiremock-test</artifactId>
      <version>${wiremock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit-pioneer</groupId>
      <artifactId>junit-pioneer</artifactId>
      <version>2.2.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>1.20.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vdurmont</groupId>
      <artifactId>semver4j</artifactId>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>com.github.spullara.mustache.java</groupId>
      <artifactId>compiler</artifactId>
      <version>0.9.13</version>
    </dependency>
    <dependency>
      <groupId>org.jboss.logging</groupId>
      <artifactId>jboss-logging</artifactId>
      <version>3.6.0.Final</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.10.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>3.1.8</version>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <!--
          Skip dockerfile-maven-plugin since we do the actual docker build from make
          Note that we still leverage the `docker` profile to do the filesystem assembly
          -->
          <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>dockerfile-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>package</id>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!--
          Skip create-licenses-for-docker since we're not distributing these images.
          It adds time to the build and I've experienced build hangs on HTTP connections
          -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>create-licenses-for-docker</id>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jenkins</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration combine.children="append">
              <redirectTestOutputToFile>true</redirectTestOutputToFile>
              <systemPropertyVariables>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <log4j.configuration>file:${build-tools.dir}/logging/log4j-surefire.properties</log4j.configuration>
                <!-- see https://quarkus.io/guides/tests-with-coverage#working-with-multi-module-projects -->
                <quarkus.jacoco.data-file>${project.build.directory}/target/jacoco.exec</quarkus.jacoco.data-file>
                <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
                <quarkus.jacoco.report-location>${project.build.directory}/target/coverage</quarkus.jacoco.report-location>
                <maven.home>${maven.home}</maven.home>
              </systemPropertyVariables>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration combine.children="append">
              <redirectTestOutputToFile>true</redirectTestOutputToFile>
              <systemPropertyVariables>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <log4j.configuration>file:${build-tools.dir}/logging/log4j-failsafe.properties</log4j.configuration>
                <!-- see https://quarkus.io/guides/tests-with-coverage#working-with-multi-module-projects -->
                <quarkus.jacoco.data-file>${project.build.directory}/target/jacoco.exec</quarkus.jacoco.data-file>
                <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
                <quarkus.jacoco.report-location>${project.build.directory}/target/coverage</quarkus.jacoco.report-location>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <skipITs>false</skipITs>
        <quarkus.native.enabled>true</quarkus.native.enabled>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
                <configuration>
                  <failIfNoTests>true</failIfNoTests>
                  <systemPropertyVariables>
                    <native.image.path>
                      ${project.build.directory}/${project.build.finalName}-runner
                    </native.image.path>
                    <java.util.logging.manager>org.jboss.logmanager.LogManager
                    </java.util.logging.manager>
                  </systemPropertyVariables>
                  <environmentVariables>
                    <QUARKUS_CONFIG_LOCATIONS>src/test/resources/application-nativeit.yaml</QUARKUS_CONFIG_LOCATIONS>
                  </environmentVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- The "unix" profile holds common configuration across Linux and MacOS. Can be disabled on Windows with
       -DskipUnix -->
      <id>unix</id>
      <activation>
        <property>
          <name>!skipUnix</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>zip-templates</id>
                <phase>initialize</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>/bin/bash</executable>
                  <workingDirectory>${maven.multiModuleProjectDirectory}</workingDirectory>
                  <arguments>
                    <argument>-c</argument>
                    <argument>make zip-templates</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>zip-templates</id>
                <phase>initialize</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>cmd.exe</executable>
                  <workingDirectory>${maven.multiModuleProjectDirectory}</workingDirectory>
                  <arguments>
                    <argument>/c</argument>
                    <argument>make zip-templates-windows</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <sourceDirectory>src/main/java</sourceDirectory>
    <testSourceDirectory>src/test/java</testSourceDirectory>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
          <configuration>
            <generateBackupPoms>false</generateBackupPoms>
            <allowMajorUpdates>false</allowMajorUpdates>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.jboss.jandex</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
        <version>1.2.1</version>
        <executions>
          <execution>
            <id>make-index</id>
            <goals>
              <goal>jandex</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <propertiesLocation>${build-tools.dir}/checkstyle/checkstyle.properties</propertiesLocation>
          <suppressionsLocation>${build-tools.dir}/checkstyle/suppressions.xml</suppressionsLocation>
          <includeTestSourceDirectory>false</includeTestSourceDirectory>
          <excludes>**/static/templates/**/*</excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>${spotbugs.maven.plugin.version}</version>
        <configuration>
          <xmlOutput>true</xmlOutput>
          <effort>Max</effort>
          <threshold>High</threshold>
          <failOnError>true</failOnError>
          <omitVisitors>FindOpenStream</omitVisitors>
        </configuration>
        <executions>
          <!--
          Ensures that FindBugs inspects source code when project is compiled.
          -->
          <execution>
            <id>analyze-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>
              <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile>
              <append>true</append>
            </configuration>
          </execution>
          <execution>
            <id>generate-code-coverage-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
              <goal>report-aggregate</goal>
            </goals>
            <configuration>
              <includes>
                <include>io/confluent/**</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <!--
          Don't ignore any files from the resources/ directory while
          copying them to the target directory.
          -->
          <addDefaultExcludes>false</addDefaultExcludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/main/generated</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- note: this is a gpl v3 licensed plugin -->
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>4.0.3</version>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
            <phase>initialize</phase>
          </execution>
        </executions>
        <configuration>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
          </generateGitPropertiesFilename>
          <includeOnlyProperties>
            <includeOnlyProperty>^git.build.(time|version)$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.id.(abbrev|full)$</includeOnlyProperty>
          </includeOnlyProperties>
          <commitIdGenerationMode>full</commitIdGenerationMode>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.7.1</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-dependency-analyzer</artifactId>
            <version>1.14.1</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration combine.children="append">
          <properties>
            <!--
            Allows parallel test execution for integration tests, but keeping
            the default behavior still running all tests sequentially (same_thread).
            For any test class that desires to run all test cases concurrently,
            add this annotation to the class:
              @Execution(ExecutionMode.CONCURRENT)
            Currently only PipelineServiceIT is enabled.
            Check https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution-config-properties
            for details about each parameter
            -->
            <configurationParameters>
              junit.jupiter.execution.parallel.enabled = true
              junit.jupiter.execution.parallel.mode.default = same_thread
              junit.jupiter.execution.parallel.mode.classes.default = same_thread
              junit.jupiter.execution.parallel.config.strategy = dynamic
              junit.jupiter.execution.parallel.config.dynamic.factor = 2.0
            </configurationParameters>
          </properties>
          <parallel>all</parallel>
          <threadCount>10</threadCount>
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <!-- see https://quarkus.io/guides/tests-with-coverage#working-with-multi-module-projects -->
            <quarkus.jacoco.data-file>${project.build.directory}/target/jacoco.exec</quarkus.jacoco.data-file>
            <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
            <quarkus.jacoco.report-location>${project.build.directory}/target/coverage</quarkus.jacoco.report-location>
          </systemPropertyVariables>
          <environmentVariables>
            <QUARKUS_CONFIG_LOCATIONS>src/test/resources/application-nativeit.yaml</QUARKUS_CONFIG_LOCATIONS>
          </environmentVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration combine.children="append">
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <!-- see https://quarkus.io/guides/tests-with-coverage#working-with-multi-module-projects -->
            <quarkus.jacoco.data-file>${project.build.directory}/target/jacoco.exec</quarkus.jacoco.data-file>
            <quarkus.jacoco.reuse-data-file>true</quarkus.jacoco.reuse-data-file>
            <quarkus.jacoco.report-location>${project.build.directory}/target/coverage</quarkus.jacoco.report-location>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.platform.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <parameters>${maven.compiler.parameters}</parameters>
          <annotationProcessorPaths>
            <path>
              <groupId>info.picocli</groupId>
              <artifactId>picocli-codegen</artifactId>
              <version>${picocli.version}</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <arg>-Aproject=${project.groupId}/${project.artifactId}</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <!-- https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin -->
        <artifactId>smallrye-graphql-maven-plugin</artifactId>
        <groupId>io.smallrye</groupId>
        <version>2.9.0</version>
        <executions>
          <execution>
            <goals>
              <goal>generate-schema</goal>
            </goals>
            <configuration>
              <destination>${maven.home}/src/generated/resources/schema.graphql
              </destination>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!-- Generate the aggregate site report in `target/site` when the `site` goal is used -->
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>summary</report>
              <report>index</report>
              <report>scm</report>
              <report>modules</report>
              <report>dependency-management</report>
              <report>plugins</report>
              <!-- these take forever
              <report>dependencies</report>
              -->
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <reportSets>
          <reportSet>
            <!-- defines aggregate unit test report -->
            <id>unit-tests-aggregate</id>
            <inherited>false</inherited>
            <reports>
              <report>report-only</report>
            </reports>
            <configuration>
              <aggregate>true</aggregate>
            </configuration>
          </reportSet>
          <reportSet>
            <!-- defines aggregate integration test report -->
            <id>integration-tests-aggregate</id>
            <inherited>false</inherited>
            <reports>
              <report>failsafe-report-only</report>
            </reports>
            <configuration>
              <aggregate>true</aggregate>
            </configuration>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <reportSets>
          <reportSet>
            <id>jacoco-report</id>
            <reports>
              <report>report-aggregate</report>
            </reports>
          </reportSet>
        </reportSets>
        <configuration>
          <includes>
            <include>io/confluent/**</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${maven-checkstyle-plugin.version}</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>checkstyle-aggregate</report>
            </reports>
          </reportSet>
        </reportSets>
        <configuration>
          <suppressionsLocation>build-tools/checkstyle/suppressions.xml</suppressionsLocation>
          <propertiesLocation>build-tools/checkstyle/checkstyle.properties</propertiesLocation>
        </configuration>
      </plugin>

      <!-- Allow site coverage report to link to code that is or is not tested -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>${jxr-maven-plugin.version}</version>
      </plugin>
    </plugins>
  </reporting>
</project>
