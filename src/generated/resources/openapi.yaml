---
openapi: 3.1.0
components:
  schemas:
    ApiKeyAndSecret:
      description: Basic authentication credentials
      type: object
      required:
      - api_key
      - api_secret
      properties:
        api_key:
          type: string
          maxLength: 64
          minLength: 1
          description: The API key to use when connecting to the external service.
        api_secret:
          maxLength: 64
          minLength: 1
          description: The API secret to use when connecting to the external service.
          type: string
          $ref: "#/components/schemas/ApiSecret"
    ApiSecret:
      type: string
      maxLength: 64
      minLength: 1
      description: A user-provided API secret that is always masked in responses
    ApplyTemplateRequest:
      type: object
      required:
      - options
      properties:
        options:
          type: object
          additionalProperties: {}
    AuthError:
      type: object
      properties:
        created_at:
          $ref: "#/components/schemas/Instant"
        message:
          type: string
        is_transient:
          type: boolean
    AuthErrors:
      type: object
      properties:
        auth_status_check:
          $ref: "#/components/schemas/AuthError"
        sign_in:
          $ref: "#/components/schemas/AuthError"
        token_refresh:
          $ref: "#/components/schemas/AuthError"
    Authentication:
      description: The authentication-related status (deprecated).
      type: object
      required:
      - status
      properties:
        status:
          $ref: "#/components/schemas/Status"
        requires_authentication_at:
          $ref: "#/components/schemas/Instant"
        user:
          $ref: "#/components/schemas/UserInfo"
        errors:
          $ref: "#/components/schemas/AuthErrors"
    BasicCredentials:
      description: Basic authentication credentials
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          maxLength: 64
          minLength: 1
          description: The username to use when connecting to the external service.
        password:
          maxLength: 64
          minLength: 1
          description: The password to use when connecting to the external service.
          type: string
          $ref: "#/components/schemas/Password"
    CCloudConfig:
      type: object
      description: Configuration for Confluent Cloud connections
      required:
      - organization_id
      properties:
        organization_id:
          type: string
          description: The identifier of the CCloud organization to use. The user's
            default organization is used when absent.
          minLength: 36
          maxLength: 36
    CCloudStatus:
      description: The status related to CCloud.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to CCloud.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        requires_authentication_at:
          description: "If the connection's auth context holds a valid token, this\
            \ attribute holds the time at which the user must re-authenticate because,\
            \ for instance, the refresh token reached the end of its absolute lifetime."
          type: string
          $ref: "#/components/schemas/Instant"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Kafka cluster.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    CollectionMetadata:
      type: object
      properties:
        self:
          type: string
        next:
          type: string
        total_size:
          type: integer
          format: int32
    ConnectedState:
      type: string
      enum:
      - NONE
      - ATTEMPTING
      - SUCCESS
      - EXPIRED
      - FAILED
    Connection:
      type: object
      required:
      - api_version
      - kind
      - id
      - status
      properties:
        api_version:
          type: string
        kind:
          type: string
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/ConnectionMetadata"
        spec:
          $ref: "#/components/schemas/ConnectionSpec"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    ConnectionMetadata:
      type: object
      properties:
        self:
          type: string
        resource_name:
          type: string
        sign_in_uri:
          type: string
    ConnectionSpec:
      description: The connection details that can be set or changed.
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the connection resource.
          minLength: 1
          maxLength: 64
        name:
          type: string
          description: The user-supplied name of the connection resource.
          maxLength: 64
        type:
          description: The type of connection resource.
          type: string
          $ref: "#/components/schemas/ConnectionType"
        ccloud_config:
          description: The details for connecting to CCloud.
          type: object
          $ref: "#/components/schemas/CCloudConfig"
        local_config:
          description: The details for connecting to Confluent Local.
          type: object
          $ref: "#/components/schemas/LocalConfig"
        kafka_cluster:
          description: "The details for connecting to a CCloud, Confluent Platform,\
            \ or Apache Kafka cluster."
          type: object
          $ref: "#/components/schemas/KafkaClusterConfig"
        schema_registry:
          description: The details for connecting to a Schema Registry.
          type: object
          $ref: "#/components/schemas/SchemaRegistryConfig"
    ConnectionStatus:
      type: object
      properties:
        ccloud:
          $ref: "#/components/schemas/CCloudStatus"
        kafka_cluster:
          $ref: "#/components/schemas/KafkaClusterStatus"
        schema_registry:
          $ref: "#/components/schemas/SchemaRegistryStatus"
        authentication:
          $ref: "#/components/schemas/Authentication"
      required:
      - authentication
    ConnectionType:
      type: string
      enum:
      - LOCAL
      - PLATFORM
      - CCLOUD
      - DIRECT
    ConnectionsList:
      type: object
      required:
      - api_version
      - kind
      - metadata
      - data
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/CollectionMetadata"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Connection"
    Error:
      type: object
      description: Describes a particular error encountered while performing an operation.
      properties:
        code:
          type: string
        status:
          type: string
        title:
          type: string
        id:
          type: string
        detail:
          type: string
        source:
          $ref: "#/components/schemas/JsonNode"
    ExceededFields:
      type: object
      properties:
        key:
          type: boolean
        value:
          type: boolean
    Failure:
      description: Provides overall information about problems encountered while performing
        an operation.
      type: object
      properties:
        status:
          type: string
        code:
          type: string
        title:
          type: string
        id:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    JsonNode:
      type: object
      properties:
        empty:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        array:
          type: boolean
        object:
          type: boolean
        nodeType:
          $ref: "#/components/schemas/JsonNodeType"
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        "null":
          type: boolean
        binary:
          type: boolean
    JsonNodeType:
      type: string
      enum:
      - ARRAY
      - BINARY
      - BOOLEAN
      - MISSING
      - "NULL"
      - NUMBER
      - OBJECT
      - POJO
      - STRING
    KafkaClusterConfig:
      type: object
      description: Kafka cluster configuration.
      required:
      - bootstrap_servers
      properties:
        bootstrap_servers:
          type: string
          description: A list of host/port pairs to use for establishing the initial
            connection to the Kafka cluster.
          minLength: 1
          maxLength: 256
        credentials:
          oneOf:
          - $ref: "#/components/schemas/BasicCredentials"
          - $ref: "#/components/schemas/ApiKeyAndSecret"
          description: "The credentials for the Kafka cluster, or null if no authentication\
            \ is required"
        ssl:
          type:
          - boolean
          - "null"
          description: "Whether to communicate with the Kafka cluster over TLS/SSL.\
            \ Defaults to 'true', but set to 'false' when the Kafka cluster does not\
            \ support TLS/SSL."
          default: true
        verify_ssl_certificates:
          type:
          - boolean
          - "null"
          description: "Whether to verify the Kafka cluster certificates. Defaults\
            \ to 'true', but set to 'false' when the Kafka cluster has self-signed\
            \ certificates."
          default: true
    KafkaClusterStatus:
      description: The status related to the specified Kafka cluster.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to the Kafka cluster.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Kafka cluster.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    LocalConfig:
      type: object
      description: Configuration when using Confluent Local and optionally a local
        Schema Registry.
      properties:
        schema-registry-uri:
          type: string
          description: The URL of the Schema Registry running locally.
          maxLength: 512
    ObjectMetadata:
      type: object
      properties:
        self:
          type: string
        resource_name:
          type: string
    OptionProperties:
      type: object
      required:
      - display_name
      - description
      properties:
        display_name:
          type: string
        description:
          type: string
        hint:
          type: string
        format:
          type: string
        pattern:
          type: string
        enum:
          type: array
          items:
            type: string
        initial_value:
          type: string
        min_length:
          type: integer
          format: int32
    PartitionConsumeData:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        next_offset:
          type: integer
          format: int64
        records:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecord"
    PartitionConsumeRecord:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
        timestamp_type:
          $ref: "#/components/schemas/TimestampType"
        headers:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeRecordHeader"
        key:
          $ref: "#/components/schemas/JsonNode"
        value:
          $ref: "#/components/schemas/JsonNode"
        key_decoding_error:
          type: string
        value_decoding_error:
          type: string
        exceeded_fields:
          $ref: "#/components/schemas/ExceededFields"
    PartitionConsumeRecordHeader:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PartitionOffset:
      type: object
      properties:
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
    Password:
      type: string
      maxLength: 64
      minLength: 1
      description: A user-provided password that is always masked in responses
    Preferences:
      type: object
      required:
      - api_version
      - kind
      - spec
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/PreferencesMetadata"
        spec:
          $ref: "#/components/schemas/PreferencesSpec"
    PreferencesMetadata:
      type: object
      required:
      - self
      properties:
        self:
          type: string
    PreferencesSpec:
      type: object
      properties:
        tls_pem_paths:
          type: array
          items:
            type: string
        trust_all_certificates:
          type: boolean
    SchemaRegistryConfig:
      type: object
      description: Schema Registry configuration.
      properties:
        id:
          type: string
          description: "The identifier of the Schema Registry cluster, if known."
          maxLength: 64
        uri:
          type: string
          description: The URL of the Schema Registry.
          minLength: 1
          maxLength: 256
        credentials:
          oneOf:
          - $ref: "#/components/schemas/BasicCredentials"
          - $ref: "#/components/schemas/ApiKeyAndSecret"
          description: "The credentials for the Schema Registry, or null if no authentication\
            \ is required"
      required:
      - uri
    SchemaRegistryStatus:
      description: The status related to the specified Schema Registry.
      type: object
      required:
      - state
      properties:
        state:
          description: The state of the connection to the Schema Registry.
          type: string
          $ref: "#/components/schemas/ConnectedState"
        user:
          description: "Information about the authenticated principal, if known."
          type: object
          $ref: "#/components/schemas/UserInfo"
        errors:
          description: Errors related to the connection to the Schema Registry.
          type: object
          $ref: "#/components/schemas/AuthErrors"
    SidecarAccessToken:
      type: object
      properties:
        auth_secret:
          type: string
    SidecarVersionResponse:
      type: object
      properties:
        version:
          type: string
    SimpleConsumeMultiPartitionRequest:
      type: object
      properties:
        offsets:
          type: array
          items:
            $ref: "#/components/schemas/PartitionOffset"
        max_poll_records:
          type: integer
          format: int32
        timestamp:
          type: integer
          format: int64
        fetch_max_bytes:
          type: integer
          format: int32
        message_max_bytes:
          type: integer
          format: int32
        from_beginning:
          type: boolean
    SimpleConsumeMultiPartitionResponse:
      type: object
      properties:
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_data_list:
          type: array
          items:
            $ref: "#/components/schemas/PartitionConsumeData"
    Status:
      type: string
      enum:
      - NO_TOKEN
      - VALID_TOKEN
      - INVALID_TOKEN
      - FAILED
    Template:
      type: object
      required:
      - api_version
      - kind
      - id
      - metadata
      properties:
        api_version:
          type: string
        kind:
          type: string
        id:
          type: string
        metadata:
          $ref: "#/components/schemas/ObjectMetadata"
        spec:
          $ref: "#/components/schemas/TemplateManifest"
    TemplateList:
      type: object
      required:
      - api_version
      - kind
      - metadata
      - data
      properties:
        api_version:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/CollectionMetadata"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Template"
    TemplateManifest:
      type: object
      required:
      - template_api_version
      - name
      - display_name
      - description
      - language
      - version
      - tags
      properties:
        template_api_version:
          type: string
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        language:
          type: string
        version:
          type: string
        tags:
          type: array
          items:
            type: string
        options:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/OptionProperties"
    TimestampType:
      type: string
      enum:
      - NO_TIMESTAMP_TYPE
      - CREATE_TIME
      - LOG_APPEND_TIME
    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        social_connection:
          type: string
        auth_type:
          type: string
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - UP
          - DOWN
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
    HealthCheck:
      type: object
      properties:
        data:
          type:
          - object
          - "null"
        name:
          type: string
        status:
          type: string
          enum:
          - UP
          - DOWN
paths:
  /api/login/realm:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json: {}
      summary: Proxy Login Realm Request
      tags:
      - Login Realm Resource
  /gateway/v1/callback-vscode-docs:
    get:
      parameters:
      - name: code
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
      summary: Callback
      tags:
      - O Auth Callback Resource
  /gateway/v1/clusters/{cluster_id}/topics/{topic_name}/partitions/-/consume:
    post:
      parameters:
      - name: cluster_id
        in: path
        required: true
        schema:
          type: string
      - name: topic_name
        in: path
        required: true
        schema:
          type: string
      - description: Connection ID
        in: header
        name: x-connection-id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleConsumeMultiPartitionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleConsumeMultiPartitionResponse"
      summary: Message Viewer
      tags:
      - Kafka Consume Resource
  /gateway/v1/connections:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionsList"
      summary: List Connections
      tags:
      - Connections Resource
    post:
      parameters:
      - name: dry_run
        in: query
        schema:
          description: Whether to validate the connection spec and determine the connection
            status without creating the connection
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
      summary: Create Connection
      tags:
      - Connections Resource
  /gateway/v1/connections/{id}:
    put:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionSpec"
        required: true
      responses:
        "200":
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        "404":
          description: Connection not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "401":
          description: Could not authenticate with updated connection configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Update Connection
      tags:
      - Connections Resource
    get:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
      summary: Get Connection
      tags:
      - Connections Resource
    delete:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
      summary: Delete Connection
      tags:
      - Connections Resource
  /gateway/v1/feature-flags/{id}/value:
    get:
      tags:
      - Feature Flags
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonNode"
        "401":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "404":
          description: Feature flag not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
        "500":
          description: Internal error parsing feature flags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Evaluate Flag
  /gateway/v1/handshake:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarAccessToken"
      summary: Handshake
      tags:
      - Handshake Resource
  /gateway/v1/preferences:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preferences"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
        "400":
          description: Provided preferences are not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Failure"
      summary: Update Preferences
      tags:
      - Preferences Resource
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preferences"
      summary: Get Preferences
      tags:
      - Preferences Resource
  /gateway/v1/templates:
    get:
      tags:
      - Templates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateList"
      summary: List
  /gateway/v1/templates/{name}:
    get:
      tags:
      - Templates
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
      summary: Get
  /gateway/v1/templates/{name}/apply:
    post:
      summary: Apply a template
      description: Applies the specified template and returns the result as a zip
        file.
      tags:
      - Templates
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyTemplateRequest"
        required: true
      responses:
        "200":
          description: Template applied successfully
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
  /gateway/v1/version:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SidecarVersionResponse"
      summary: Version
      tags:
      - Version Resource
  /gateway/v1/health:
    description: MicroProfile Health Endpoint
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    get:
      operationId: microprofile_health_root
      description: Check the health of the application
      tags:
      - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/live:
    description: MicroProfile Health - Liveness Endpoint
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    get:
      operationId: microprofile_health_liveness
      description: Check the liveness of the application
      tags:
      - MicroProfile Health
      summary: The Liveness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/ready:
    description: MicroProfile Health - Readiness Endpoint
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    get:
      operationId: microprofile_health_readiness
      description: Check the readiness of the application
      tags:
      - MicroProfile Health
      summary: The Readiness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /gateway/v1/health/started:
    description: MicroProfile Health - Startup Endpoint
    summary: Startup checks are an used to tell when the application has started
    get:
      operationId: microprofile_health_startup
      description: Check the startup of the application
      tags:
      - MicroProfile Health
      summary: The Startup check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
tags:
- name: Feature Flags
  description: Feature flags
- name: Templates
  description: Code generation templates
info:
  title: Confluent ide-sidecar API
  version: 1.0.1
  description: "API for the Confluent ide-sidecar, part of Confluent for VS Code"
  termsOfService: Your terms here
  contact:
    name: Confluent for VS Code Support
    email: vscode@confluent.io
    url: https://confluent.io/contact
servers:
- url: http://127.0.0.1:26636
  description: Auto generated value
