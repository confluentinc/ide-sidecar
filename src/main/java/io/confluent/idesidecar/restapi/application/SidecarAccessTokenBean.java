package io.confluent.idesidecar.restapi.application;

import io.confluent.idesidecar.restapi.exceptions.TokenAlreadyGeneratedException;
import jakarta.inject.Singleton;
import java.security.SecureRandom;

/**
 * A bean that generates a random string to be used as an access token for requests to the sidecar. 
 * The token is generated upon generateToken() call (when the handshake route is hit) and is 
 * stored in the token field.  The token string can subsequently be accessed using getToken()
 * (when validating request Authorization header, done by AccessTokenFilter).
 */
@Singleton
public class SidecarAccessTokenBean {

  // Character set from which the random string will be generated. Needs to be HTTP header safe.
  private static final String CHAR_SET = 
                            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

  // How long should generated tokens be? Why 24? Why not?
  public static final int TOKEN_LENGTH = 24;

  private String token;

  /**
   * Called by the handshake route to generate a new token.
   * Should be called exactly once. Subsequent calls will throw a TokenAlreadyGeneratedException.
   */
  public synchronized String generateToken() throws TokenAlreadyGeneratedException {
    if (token != null) {
      throw new TokenAlreadyGeneratedException("Token has already been generated");
    }

    SecureRandom random = new SecureRandom();
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < TOKEN_LENGTH; i++) {
      int index = random.nextInt(CHAR_SET.length());
      sb.append(CHAR_SET.charAt(index));
    }

    token = sb.toString();
    return token;
  }

  /**
   * Used to get the token generated by the bean when comparing against provided
   * Authentication: Bearer header.
   */
  public String getToken() {
    return token;
  }
}
