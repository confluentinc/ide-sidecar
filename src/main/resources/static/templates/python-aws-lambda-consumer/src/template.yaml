AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: python-aws-lambda-consumer

Globals:
  Function:
    Timeout: 3
    LoggingConfig:
      LogFormat: JSON

Parameters:
  KafkaBootstrapServer:
    Type: String
    Description: Kafka bootstrap url for the consumer to connect to
  ConsumerGroupId:
    Type: String
    Default: "python-aws-lambda-consumer"
    Description: Consumer group id for the consumer
  ApiKey:
    Type: String
    Description: API Key for the Confluent cluster
  Secret:
    Type: String
    Description: Secret for the Confluent cluster
  Topic:
    Type: String
    Description: Topic to subscribe 
  StartingPosition:
    Type: String
    Description: Starting position for the consumer
  MaxMessages:
    Type: Number
    Description: Max number of messages to consume in one poll
  MaxBatchInterval:
    Type: Number
    Description: Max time to wait for max messages
  
Resources:
  KafkaCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-kafka-credentials
      Description: Credentials for Kafka authentication
      SecretString: !Sub |
        {
          "username": "${ApiKey}",
          "password": "${Secret}"
        }

  KafkaConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Events:
        SelfManagedKafkaEvent:
          Type: SelfManagedKafka
          Properties:
            KafkaBootstrapServers:
              - !Ref KafkaBootstrapServer
            Topics:
              - !Ref Topic
            SourceAccessConfigurations:
              - Type: BASIC_AUTH
                URI: !Ref KafkaCredentialsSecret
            StartingPosition: !Ref StartingPosition
            
            #Max batching interval
            BatchSize: !Ref MaxMessages
            MaximumBatchingWindowInSeconds: !Ref MaxBatchInterval

            ConsumerGroupId: !Ref ConsumerGroupId
            
      Environment:
        Variables:
          KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
          KAFKA_SASL_MECHANISM: "SCRAM-SHA-512"
      Policies:
        - AWSLambdaBasicExecutionRole
        # secrets manager read policy
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref KafkaCredentialsSecret



Outputs:
  KafkaConsumerFunction:
    Description: "Kafka Consumer Lambda Function ARN"
    Value: !GetAtt KafkaConsumerFunction.Arn
