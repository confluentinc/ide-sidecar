---
template_api_version: 0.0.1
name: python-consumer
display_name: Python Consumer Application
description: >
  A simple Python consumer that reads messages from a topic in Confluent Cloud.
  Ideal for developers new to Kafka who want to learn about stream processing with Kafka.
version: 0.0.1
language: Python
tags:
  - consumer
  - getting started
  - python
options:
  bootstrap_server:
    display_name: Kafka Bootstrap Server
    description: One or more comma-separated host and port pairs that are the addresses where Kafka brokers accept client bootstrap requests.
    pattern: "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])[:]([0-9]{2,8}))(,([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])[:]([0-9]{2,8}))*$"
    initial_value: "localhost:9092,localhost:9093,localhost:9094"
    min_length: 1
  api_key:
    display_name: Kafka Cluster API Key
    description: The API key for accessing the Kafka cluster in Confluent Cloud.
    pattern: "^[A-Z0-7=]{16}$"
  api_secret:
    display_name: Kafka Cluster API Secret
    description: The API secret for accessing the Kafka cluster in Confluent Cloud.
    pattern: "^[A-Z0-7=]{64-72}$"
    format: password
  topic:
    display_name: Topic Name
    description: The name of the Kafka topic to consume.
    pattern: "^([a-zA-Z0-9._-]{1,255})$"
  group_id:
    display_name: Consumer Group
    description: A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer subscribes to a topic or uses the Kafka-based offset management strategy.
    pattern: "^([a-zA-Z0-9._-]{1,255})$"
  auto_offset_reset:
    display_name:
    description: What to do when there is no initial offset in the Kafka topic or if the current offset does not exist any more on the server (e.g. because that data has been deleted).
    initial_value: earliest
    enum:
      - earliest
      - latest
